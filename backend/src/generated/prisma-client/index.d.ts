// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  car: (where?: CarWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  car: (where: CarWhereUniqueInput) => CarPromise;
  cars: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Car>;
  carsConnection: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCar: (data: CarCreateInput) => CarPromise;
  updateCar: (
    args: { data: CarUpdateInput; where: CarWhereUniqueInput }
  ) => CarPromise;
  updateManyCars: (
    args: { data: CarUpdateManyMutationInput; where?: CarWhereInput }
  ) => BatchPayloadPromise;
  upsertCar: (
    args: {
      where: CarWhereUniqueInput;
      create: CarCreateInput;
      update: CarUpdateInput;
    }
  ) => CarPromise;
  deleteCar: (where: CarWhereUniqueInput) => CarPromise;
  deleteManyCars: (where?: CarWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  car: (
    where?: CarSubscriptionWhereInput
  ) => CarSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "localization_ASC"
  | "localization_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "segment_ASC"
  | "segment_DESC"
  | "brand_ASC"
  | "brand_DESC"
  | "model_ASC"
  | "model_DESC"
  | "version_ASC"
  | "version_DESC"
  | "mileage_ASC"
  | "mileage_DESC"
  | "productionYear_ASC"
  | "productionYear_DESC"
  | "fuelType_ASC"
  | "fuelType_DESC"
  | "engineSize_ASC"
  | "engineSize_DESC"
  | "power_ASC"
  | "power_DESC"
  | "torque_ASC"
  | "torque_DESC"
  | "transmission_ASC"
  | "transmission_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "ITEMCREATE"
  | "ITEMUPDATE"
  | "ITEMDELETE";

export type FuelType =
  | "BENZYNA"
  | "BENZYNA_LPG"
  | "BENZYNA_CNG"
  | "DIESEL"
  | "HYBRYDA"
  | "ELEKTRYCZNY"
  | "INNY";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Brand = "AUDI" | "BMW" | "MERCEDES_BENZ" | "SAAB";

export type Segment = "A" | "B" | "C" | "D" | "E" | "F";

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  car?: CarWhereInput;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  localization?: String;
  localization_not?: String;
  localization_in?: String[] | String;
  localization_not_in?: String[] | String;
  localization_lt?: String;
  localization_lte?: String;
  localization_gt?: String;
  localization_gte?: String;
  localization_contains?: String;
  localization_not_contains?: String;
  localization_starts_with?: String;
  localization_not_starts_with?: String;
  localization_ends_with?: String;
  localization_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface CarUpdateManyMutationInput {
  segment?: Segment;
  brand?: Brand;
  model?: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType?: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type CarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarUpdateOneInput {
  create?: CarCreateInput;
  update?: CarUpdateDataInput;
  upsert?: CarUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface CarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  segment?: Segment;
  segment_not?: Segment;
  segment_in?: Segment[] | Segment;
  segment_not_in?: Segment[] | Segment;
  brand?: Brand;
  brand_not?: Brand;
  brand_in?: Brand[] | Brand;
  brand_not_in?: Brand[] | Brand;
  model?: String;
  model_not?: String;
  model_in?: String[] | String;
  model_not_in?: String[] | String;
  model_lt?: String;
  model_lte?: String;
  model_gt?: String;
  model_gte?: String;
  model_contains?: String;
  model_not_contains?: String;
  model_starts_with?: String;
  model_not_starts_with?: String;
  model_ends_with?: String;
  model_not_ends_with?: String;
  version?: String;
  version_not?: String;
  version_in?: String[] | String;
  version_not_in?: String[] | String;
  version_lt?: String;
  version_lte?: String;
  version_gt?: String;
  version_gte?: String;
  version_contains?: String;
  version_not_contains?: String;
  version_starts_with?: String;
  version_not_starts_with?: String;
  version_ends_with?: String;
  version_not_ends_with?: String;
  mileage?: Int;
  mileage_not?: Int;
  mileage_in?: Int[] | Int;
  mileage_not_in?: Int[] | Int;
  mileage_lt?: Int;
  mileage_lte?: Int;
  mileage_gt?: Int;
  mileage_gte?: Int;
  productionYear?: Int;
  productionYear_not?: Int;
  productionYear_in?: Int[] | Int;
  productionYear_not_in?: Int[] | Int;
  productionYear_lt?: Int;
  productionYear_lte?: Int;
  productionYear_gt?: Int;
  productionYear_gte?: Int;
  fuelType?: FuelType;
  fuelType_not?: FuelType;
  fuelType_in?: FuelType[] | FuelType;
  fuelType_not_in?: FuelType[] | FuelType;
  engineSize?: Int;
  engineSize_not?: Int;
  engineSize_in?: Int[] | Int;
  engineSize_not_in?: Int[] | Int;
  engineSize_lt?: Int;
  engineSize_lte?: Int;
  engineSize_gt?: Int;
  engineSize_gte?: Int;
  power?: Int;
  power_not?: Int;
  power_in?: Int[] | Int;
  power_not_in?: Int[] | Int;
  power_lt?: Int;
  power_lte?: Int;
  power_gt?: Int;
  power_gte?: Int;
  torque?: Int;
  torque_not?: Int;
  torque_in?: Int[] | Int;
  torque_not_in?: Int[] | Int;
  torque_lt?: Int;
  torque_lte?: Int;
  torque_gt?: Int;
  torque_gte?: Int;
  transmission?: String;
  transmission_not?: String;
  transmission_in?: String[] | String;
  transmission_not_in?: String[] | String;
  transmission_lt?: String;
  transmission_lte?: String;
  transmission_gt?: String;
  transmission_gte?: String;
  transmission_contains?: String;
  transmission_not_contains?: String;
  transmission_starts_with?: String;
  transmission_not_starts_with?: String;
  transmission_ends_with?: String;
  transmission_not_ends_with?: String;
  AND?: CarWhereInput[] | CarWhereInput;
  OR?: CarWhereInput[] | CarWhereInput;
  NOT?: CarWhereInput[] | CarWhereInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: String;
  resetTokenExpiry_not?: String;
  resetTokenExpiry_in?: String[] | String;
  resetTokenExpiry_not_in?: String[] | String;
  resetTokenExpiry_lt?: String;
  resetTokenExpiry_lte?: String;
  resetTokenExpiry_gt?: String;
  resetTokenExpiry_gte?: String;
  resetTokenExpiry_contains?: String;
  resetTokenExpiry_not_contains?: String;
  resetTokenExpiry_starts_with?: String;
  resetTokenExpiry_not_starts_with?: String;
  resetTokenExpiry_ends_with?: String;
  resetTokenExpiry_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PostUpdateInput {
  car?: CarUpdateOneInput;
  price?: Int;
  localization?: String;
  avatar?: String;
}

export interface PostUpdateManyMutationInput {
  price?: Int;
  localization?: String;
  avatar?: String;
}

export interface CarCreateOneInput {
  create?: CarCreateInput;
  connect?: CarWhereUniqueInput;
}

export interface CarUpdateDataInput {
  segment?: Segment;
  brand?: Brand;
  model?: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType?: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface CarUpdateInput {
  segment?: Segment;
  brand?: Brand;
  model?: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType?: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export interface CarCreateInput {
  segment?: Segment;
  brand: Brand;
  model: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export interface PostCreateInput {
  car?: CarCreateOneInput;
  price: Int;
  localization?: String;
  avatar?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions?: UserCreatepermissionsInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface CarUpsertNestedInput {
  update: CarUpdateDataInput;
  create: CarCreateInput;
}

export interface CarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarWhereInput;
  AND?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  OR?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  NOT?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CarEdge {
  cursor: String;
}

export interface CarEdgePromise extends Promise<CarEdge>, Fragmentable {
  node: <T = CarPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarEdgeSubscription
  extends Promise<AsyncIterator<CarEdge>>,
    Fragmentable {
  node: <T = CarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface CarConnection {}

export interface CarConnectionPromise
  extends Promise<CarConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarEdge>>() => T;
  aggregate: <T = AggregateCarPromise>() => T;
}

export interface CarConnectionSubscription
  extends Promise<AsyncIterator<CarConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarSubscription>() => T;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  price: Int;
  localization?: String;
  avatar?: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  car: <T = CarPromise>() => T;
  price: () => Promise<Int>;
  localization: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  car: <T = CarSubscription>() => T;
  price: () => Promise<AsyncIterator<Int>>;
  localization: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  price: Int;
  localization?: String;
  avatar?: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  localization: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
  localization: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface CarPreviousValues {
  id: ID_Output;
  segment?: Segment;
  brand: Brand;
  model: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export interface CarPreviousValuesPromise
  extends Promise<CarPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  segment: () => Promise<Segment>;
  brand: () => Promise<Brand>;
  model: () => Promise<String>;
  version: () => Promise<String>;
  mileage: () => Promise<Int>;
  productionYear: () => Promise<Int>;
  fuelType: () => Promise<FuelType>;
  engineSize: () => Promise<Int>;
  power: () => Promise<Int>;
  torque: () => Promise<Int>;
  transmission: () => Promise<String>;
}

export interface CarPreviousValuesSubscription
  extends Promise<AsyncIterator<CarPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  segment: () => Promise<AsyncIterator<Segment>>;
  brand: () => Promise<AsyncIterator<Brand>>;
  model: () => Promise<AsyncIterator<String>>;
  version: () => Promise<AsyncIterator<String>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  productionYear: () => Promise<AsyncIterator<Int>>;
  fuelType: () => Promise<AsyncIterator<FuelType>>;
  engineSize: () => Promise<AsyncIterator<Int>>;
  power: () => Promise<AsyncIterator<Int>>;
  torque: () => Promise<AsyncIterator<Int>>;
  transmission: () => Promise<AsyncIterator<String>>;
}

export interface CarSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarSubscriptionPayloadPromise
  extends Promise<CarSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarPreviousValuesPromise>() => T;
}

export interface CarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarPreviousValuesSubscription>() => T;
}

export interface Car {
  id: ID_Output;
  segment?: Segment;
  brand: Brand;
  model: String;
  version?: String;
  mileage?: Int;
  productionYear?: Int;
  fuelType: FuelType;
  engineSize?: Int;
  power?: Int;
  torque?: Int;
  transmission?: String;
}

export interface CarPromise extends Promise<Car>, Fragmentable {
  id: () => Promise<ID_Output>;
  segment: () => Promise<Segment>;
  brand: () => Promise<Brand>;
  model: () => Promise<String>;
  version: () => Promise<String>;
  mileage: () => Promise<Int>;
  productionYear: () => Promise<Int>;
  fuelType: () => Promise<FuelType>;
  engineSize: () => Promise<Int>;
  power: () => Promise<Int>;
  torque: () => Promise<Int>;
  transmission: () => Promise<String>;
}

export interface CarSubscription
  extends Promise<AsyncIterator<Car>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  segment: () => Promise<AsyncIterator<Segment>>;
  brand: () => Promise<AsyncIterator<Brand>>;
  model: () => Promise<AsyncIterator<String>>;
  version: () => Promise<AsyncIterator<String>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  productionYear: () => Promise<AsyncIterator<Int>>;
  fuelType: () => Promise<AsyncIterator<FuelType>>;
  engineSize: () => Promise<AsyncIterator<Int>>;
  power: () => Promise<AsyncIterator<Int>>;
  torque: () => Promise<AsyncIterator<Int>>;
  transmission: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCar {
  count: Int;
}

export interface AggregateCarPromise
  extends Promise<AggregateCar>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSubscription
  extends Promise<AsyncIterator<AggregateCar>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Brand",
    embedded: false
  },
  {
    name: "Car",
    embedded: false
  },
  {
    name: "FuelType",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Segment",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
